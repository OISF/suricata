// This file is automatically generated. Do not edit.

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JsonBuilder {
    _unused: [u8; 0],
}
#[doc = " A \"mark\" or saved state for a JsonBuilder object.\n\n The name is full, and the types are u64 as this object is used\n directly in C as well."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JsonBuilderMark {
    pub position: u64,
    pub state_index: u64,
    pub state: u64,
}
extern "C" {
    pub fn jb_new_object() -> *mut JsonBuilder;
}
extern "C" {
    pub fn jb_new_array() -> *mut JsonBuilder;
}
extern "C" {
    pub fn jb_clone(js: *mut JsonBuilder) -> *mut JsonBuilder;
}
extern "C" {
    pub fn jb_free(js: *mut JsonBuilder);
}
extern "C" {
    pub fn jb_capacity(jb: *mut JsonBuilder) -> usize;
}
extern "C" {
    pub fn jb_reset(jb: *mut JsonBuilder);
}
extern "C" {
    pub fn jb_open_object(js: *mut JsonBuilder, key: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn jb_start_object(js: *mut JsonBuilder) -> bool;
}
extern "C" {
    pub fn jb_open_array(js: *mut JsonBuilder, key: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn jb_set_string(
        js: *mut JsonBuilder, key: *const ::std::os::raw::c_char,
        val: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn jb_set_string_from_bytes(
        js: *mut JsonBuilder, key: *const ::std::os::raw::c_char, bytes: *const u8, len: u32,
    ) -> bool;
}
extern "C" {
    pub fn jb_set_base64(
        js: *mut JsonBuilder, key: *const ::std::os::raw::c_char, bytes: *const u8, len: u32,
    ) -> bool;
}
extern "C" {
    pub fn jb_set_hex(
        js: *mut JsonBuilder, key: *const ::std::os::raw::c_char, bytes: *const u8, len: u32,
    ) -> bool;
}
extern "C" {
    pub fn jb_set_formatted(js: *mut JsonBuilder, formatted: *const ::std::os::raw::c_char)
        -> bool;
}
extern "C" {
    pub fn jb_append_object(jb: *mut JsonBuilder, obj: *const JsonBuilder) -> bool;
}
extern "C" {
    pub fn jb_set_object(
        js: *mut JsonBuilder, key: *const ::std::os::raw::c_char, val: *mut JsonBuilder,
    ) -> bool;
}
extern "C" {
    pub fn jb_append_string(js: *mut JsonBuilder, val: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn jb_append_string_from_bytes(js: *mut JsonBuilder, bytes: *const u8, len: u32) -> bool;
}
extern "C" {
    pub fn jb_append_base64(js: *mut JsonBuilder, bytes: *const u8, len: u32) -> bool;
}
extern "C" {
    pub fn jb_append_uint(js: *mut JsonBuilder, val: u64) -> bool;
}
extern "C" {
    pub fn jb_append_float(js: *mut JsonBuilder, val: f64) -> bool;
}
extern "C" {
    pub fn jb_set_uint(js: *mut JsonBuilder, key: *const ::std::os::raw::c_char, val: u64) -> bool;
}
extern "C" {
    pub fn jb_set_int(js: *mut JsonBuilder, key: *const ::std::os::raw::c_char, val: i64) -> bool;
}
extern "C" {
    pub fn jb_set_float(js: *mut JsonBuilder, key: *const ::std::os::raw::c_char, val: f64)
        -> bool;
}
extern "C" {
    pub fn jb_set_bool(js: *mut JsonBuilder, key: *const ::std::os::raw::c_char, val: bool)
        -> bool;
}
extern "C" {
    pub fn jb_close(js: *mut JsonBuilder) -> bool;
}
extern "C" {
    pub fn jb_len(js: *const JsonBuilder) -> usize;
}
extern "C" {
    pub fn jb_ptr(js: *mut JsonBuilder) -> *const u8;
}
extern "C" {
    pub fn jb_get_mark(js: *mut JsonBuilder, mark: *mut JsonBuilderMark);
}
extern "C" {
    pub fn jb_restore_mark(js: *mut JsonBuilder, mark: *mut JsonBuilderMark) -> bool;
}
